1. UDP is fast. The overhead of sending a packet over UDP is much lesser as compared to TCP. Control information is generally very less data which can be packed in one packet and sent for which UDP is more suitable. Making a new TCP connection for sending control information will be very inefficient. Also, UDP is stateless which means it is good for sending unrelated information (e.g. control data for new requests). Also, considering many clients would like to send the control information, setting up new TCP connections will be very inefficient. With UDP, problems may arise related to failure in sending the message. A message lost in UDP is not reattempted to resend which means, to handle this problem, we should develop over own propriety protocol in guessing failure and requesting the same information again.

2. File transfers usually involve large data transfers which means we can easily bear the TCP overhead in setting up new TCP connection, at the same time getting reliable transfers. TCP grants delivery and order, which is not provided by UDP. Meaning that, if a file is divided into multiple packets (which is very likely) and one packet is lost on UDP, the file is corrupted; also, if the packets do not arrive in order (which is not guaranted by UDP), you also corrupt the file. So, on application level, we would have to implement both of those functionalities: guaranteeing order - tracking each packet with some ordered id - and arrival - thourgh an application level ACK on each packet, where the server is able to resend lost packets.

3. The server needs to create a thread for attending the client after it 'accept's one client; while the main server thread keeps on only accepting new clients.